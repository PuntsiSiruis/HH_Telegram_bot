from aiogram import Bot, types
from aiogram.dispatcher.filters import state
from PqT5 import *
import butnn
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
class filtersforproject(StatesGroup):
    hp_job = State()
    tch_job = State()
    same = State()

bot = Bot(token='1969692948:AAED4IUekHGSxeLcdvNBMyc552FUtEeQF3s')
list_filters = {
    '–ù–µ—Ç –æ–ø—ã—Ç–∞':'noExperience',
    '1 –≥–æ–¥–∞ –¥–æ 3 –ª–µ—Ç':'between1And3',
    '–û—Ç 3 –¥–æ 6 –ª–µ—Ç':'between3And6',
    '–ë–æ–ª–µ–µ 6':'moreThan6',
    '–ù–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è':'unknown',
    '–ú—É–∂—Å–∫–æ–π':'male',
    '–ñ–µ–Ω—Å–∫–∏–π':'female',
    '–ü—Ä–æ–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞':'project',
    '–í–æ–ª–æ–Ω—Ç—ë—Ä—Å—Ç–≤–æ':'volunteer',
    '–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞':'probation',
    '–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å':'part',
    '–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å':'full'
}
dp = Dispatcher(bot, storage=MemoryStorage())
print('–†–ê–ë–û–¢–ê –ò–î–Å–¢ –°–¢–ê–ë–ò–õ–¨–ù–û')

@dp.message_handler(content_types=['text'])
async def main(message: types.Message):
    if message.text == '–ø—Ä–∏–≤–µ—Ç' or message.text == '/—Å—Ç–∞—Ä—Ç' or message.text == '/start' or message.text == '–Ω–∞—á–∞—Ç—å' or message.text == '/–∑–∞–Ω–æ–≤–æ' or message.text == '–ü—Ä–∏–≤–µ—Ç' or message.text == '–ù–∞—á–∞—Ç—å':
        await bot.send_message(message.from_user.id, f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π!\n–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è, {message.chat.first_name} {message.chat.last_name}')
        await bot.send_message(message.from_user.id, 'üòÄ', reply_markup=butnn.greet_kb)
    elif message.text == '–í—ã–±—Ä–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é':
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª üëâ', reply_markup=butnn.vakan_kb)
    elif message.text == '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å':
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã--\n1–§–ò–õ–¨–¢–†:\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã -',
                               reply_markup=butnn.gret_kb)
        await filtersforproject.hp_job.set()
        @dp.message_handler(state=filtersforproject.hp_job)
        async def answer_q1(message: types.Message, state: FSMContext):
            hp_job = message.text
            await state.update_data(hp_job=hp_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 2 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.hh_kb)
            await filtersforproject.tch_job.set()

        @dp.message_handler(state=filtersforproject.tch_job)
        async def answer_q2(message: types.Message, state: FSMContext):
            tch_job = message.text
            await state.update_data(tch_job=tch_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 3 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.zants_kb)
            await filtersforproject.same.set()
#iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii
        @dp.message_handler(state=filtersforproject.same)
        async def answer_q3(message: types.Message, state: FSMContext):
            same = message.text
            await state.update_data(same=same)
            data = await state.get_data()
            text = '''1 –§–∏–ª—å—Ç—Ä : {hp_job}\n2 –§–∏–ª—å—Ç—Ä : {tch_job}\n3 –§–∏–ª—å—Ç—Ä : {same}'''.format(
                hp_job=data.get('hp_job'),
                tch_job=data.get('tch_job'),
                same=data.get('same'),
            )
            #professeion_get(1, list_filters.get(data.get('hp_job')), list_filters.get(data.get('tch_job')), list_filters.get(data.get('same')))
            a = professeion_get(8, list_filters.get(data.get('hp_job')), list_filters.get(data.get('tch_job')), list_filters.get(data.get('same')))
            for _ in a.values():
                url = 'https://hh.ru' + _
                b = resume_get(url)
                await bot.send_message(message.from_user.id,f'–ó–∞–≥–æ–ª–æ–≤–æ–∫ : {b.get("–ó–∞–≥–æ–ª–æ–≤–æ–∫:")}\n–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞: {b.get("–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞")}\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {b.get("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")}\n–û–±–æ –º–Ω–µ:{b.get("–û–±–æ –º–Ω–µ")}\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ:{url}')
            await state.reset_state(with_data=False)
            await message.answer(text=text)
        @dp.message_handler()
        async def e_else(message, state):
            data = await state.get_data()
            await message.answer('–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤. 1 –§–∏–ª—å—Ç—Ä {hp_job}'.format(data), reply_markup=butnn.hh_kb)
#await state.finish() –≤ –∫–æ–Ω—Ü–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—Ä–æ–ø–∏—Å–∞—Ç—å
    elif message.text == '–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π –±–∏–∑–Ω–µ—Å':
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã--\n1–§–ò–õ–¨–¢–†:\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã -',
                               reply_markup=butnn.gret_kb)
        await filtersforproject.hp_job.set()
        @dp.message_handler(state=filtersforproject.hp_job)
        async def answer_q1(message: types.Message, state: FSMContext):
            hp_job = message.text
            await state.update_data(hp_job=hp_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 2 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.hh_kb)
            await filtersforproject.tch_job.set()

        @dp.message_handler(state=filtersforproject.tch_job)
        async def answer_q2(message: types.Message, state: FSMContext):
            tch_job = message.text
            await state.update_data(tch_job=tch_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 3 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.zants_kb)
            await filtersforproject.same.set()

        @dp.message_handler(state=filtersforproject.same)
        async def answer_q3(message: types.Message, state: FSMContext):
            same = message.text
            await state.update_data(same=same)
            data = await state.get_data()
            text = '''1 –§–∏–ª—å—Ç—Ä : {hp_job}\n2 –§–∏–ª—å—Ç—Ä : {tch_job}\n3 –§–∏–ª—å—Ç—Ä : {same}'''.format(
                hp_job=data.get('hp_job'),
                tch_job=data.get('tch_job'),
                same=data.get('same'),
            )
            a = professeion_get(7, list_filters.get(data.get('hp_job')), list_filters.get(data.get('tch_job')),
                                list_filters.get(data.get('same')))
            for _ in a.values():
                url = 'https://hh.ru' + _
                b = resume_get(url)
                await bot.send_message(message.from_user.id,
                                       f'–ó–∞–≥–æ–ª–æ–≤–æ–∫ : {b.get("–ó–∞–≥–æ–ª–æ–≤–æ–∫:")}\n–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞: {b.get("–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞")}\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {b.get("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")}\n–û–±–æ –º–Ω–µ:{b.get("–û–±–æ –º–Ω–µ")}\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ:{url}')
            await state.reset_state(with_data=False)
            await message.answer(text=text)
        @dp.message_handler()
        async def e_else(message, state):
            data = await state.get_data()
            await message.answer('–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤. 1 –§–∏–ª—å—Ç—Ä {hp_job}'.format(data), reply_markup=butnn.hh_kb)

    elif message.text == '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª':
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã--\n1–§–ò–õ–¨–¢–†:\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã -',
                               reply_markup=butnn.gret_kb)
        await filtersforproject.hp_job.set()

        @dp.message_handler(state=filtersforproject.hp_job)
        async def answer_q1(message: types.Message, state: FSMContext):
            hp_job = message.text
            await state.update_data(hp_job=hp_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 2 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.hh_kb)
            await filtersforproject.tch_job.set()

        @dp.message_handler(state=filtersforproject.tch_job)
        async def answer_q2(message: types.Message, state: FSMContext):
            tch_job = message.text
            await state.update_data(tch_job=tch_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 3 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.zants_kb)
            await filtersforproject.same.set()

        @dp.message_handler(state=filtersforproject.same)
        async def answer_q3(message: types.Message, state: FSMContext):
            same = message.text
            await state.update_data(same=same)
            data = await state.get_data()
            text = '''1 –§–∏–ª—å—Ç—Ä : {hp_job}\n2 –§–∏–ª—å—Ç—Ä : {tch_job}\n3 –§–∏–ª—å—Ç—Ä : {same}'''.format(
                hp_job=data.get('hp_job'),
                tch_job=data.get('tch_job'),
                same=data.get('same'),
            )
            a = professeion_get(4, list_filters.get(data.get('hp_job')), list_filters.get(data.get('tch_job')),
                                list_filters.get(data.get('same')))
            for _ in a.values():
                url = 'https://hh.ru' + _
                b = resume_get(url)
                await bot.send_message(message.from_user.id,
                                       f'–ó–∞–≥–æ–ª–æ–≤–æ–∫ : {b.get("–ó–∞–≥–æ–ª–æ–≤–æ–∫:")}\n–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞: {b.get("–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞")}\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {b.get("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")}\n–û–±–æ –º–Ω–µ:{b.get("–û–±–æ –º–Ω–µ")}\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ:{url}')
            await state.reset_state(with_data=False)
            await message.answer(text=text)

        @dp.message_handler()
        async def e_else(message, state):
            data = await state.get_data()
            await message.answer('–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤. 1 –§–∏–ª—å—Ç—Ä {hp_job}'.format(data),
                                 reply_markup=butnn.hh_kb)

    elif message.text == '–ë–∞–Ω–∫–∏, –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, –õ–∏–∑–∏–Ω–≥':
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã--\n1–§–ò–õ–¨–¢–†:\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã -',
                               reply_markup=butnn.gret_kb)
        await filtersforproject.hp_job.set()

        @dp.message_handler(state=filtersforproject.hp_job)
        async def answer_q1(message: types.Message, state: FSMContext):
            hp_job = message.text
            await state.update_data(hp_job=hp_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 2 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.hh_kb)
            await filtersforproject.tch_job.set()

        @dp.message_handler(state=filtersforproject.tch_job)
        async def answer_q2(message: types.Message, state: FSMContext):
            tch_job = message.text
            await state.update_data(tch_job=tch_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 3 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.zants_kb)
            await filtersforproject.same.set()

        @dp.message_handler(state=filtersforproject.same)
        async def answer_q3(message: types.Message, state: FSMContext):
            same = message.text
            await state.update_data(same=same)
            data = await state.get_data()
            text = '''1 –§–∏–ª—å—Ç—Ä : {hp_job}\n2 –§–∏–ª—å—Ç—Ä : {tch_job}\n3 –§–∏–ª—å—Ç—Ä : {same}'''.format(
                hp_job=data.get('hp_job'),
                tch_job=data.get('tch_job'),
                same=data.get('same'),
            )
            a = professeion_get(5, list_filters.get(data.get('hp_job')), list_filters.get(data.get('tch_job')),
                                list_filters.get(data.get('same')))
            for _ in a.values():
                url = 'https://hh.ru' + _
                b = resume_get(url)
                await bot.send_message(message.from_user.id,
                                       f'–ó–∞–≥–æ–ª–æ–≤–æ–∫ : {b.get("–ó–∞–≥–æ–ª–æ–≤–æ–∫:")}\n–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞: {b.get("–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞")}\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {b.get("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")}\n–û–±–æ –º–Ω–µ:{b.get("–û–±–æ –º–Ω–µ")}\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ:{url}')
            await state.reset_state(with_data=False)
            await message.answer(text=text)

        @dp.message_handler()
        async def e_else(message, state):
            data = await state.get_data()
            await message.answer('–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤. 1 –§–∏–ª—å—Ç—Ä {hp_job}'.format(data),
                                 reply_markup=butnn.hh_kb)

    elif message.text == '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è, —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–π —Å—á—ë—Ç, —Ñ–∏–Ω–∞–Ω—Å—ã –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è':
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã--\n1–§–ò–õ–¨–¢–†:\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã -',
                               reply_markup=butnn.gret_kb)
        await filtersforproject.hp_job.set()

        @dp.message_handler(state=filtersforproject.hp_job)
        async def answer_q1(message: types.Message, state: FSMContext):
            hp_job = message.text
            await state.update_data(hp_job=hp_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 2 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.hh_kb)
            await filtersforproject.tch_job.set()

        @dp.message_handler(state=filtersforproject.tch_job)
        async def answer_q2(message: types.Message, state: FSMContext):
            tch_job = message.text
            await state.update_data(tch_job=tch_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 3 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.zants_kb)
            await filtersforproject.same.set()

        @dp.message_handler(state=filtersforproject.same)
        async def answer_q3(message: types.Message, state: FSMContext):
            same = message.text
            await state.update_data(same=same)
            data = await state.get_data()
            text = '''1 –§–∏–ª—å—Ç—Ä : {hp_job}\n2 –§–∏–ª—å—Ç—Ä : {tch_job}\n3 –§–∏–ª—å—Ç—Ä : {same}'''.format(
                hp_job=data.get('hp_job'),
                tch_job=data.get('tch_job'),
                same=data.get('same'),
            )
            a = professeion_get(2, list_filters.get(data.get('hp_job')), list_filters.get(data.get('tch_job')),
                                list_filters.get(data.get('same')))
            for _ in a.values():
                url = 'https://hh.ru' + _
                b = resume_get(url)
                await bot.send_message(message.from_user.id,
                                       f'–ó–∞–≥–æ–ª–æ–≤–æ–∫ : {b.get("–ó–∞–≥–æ–ª–æ–≤–æ–∫:")}\n–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞: {b.get("–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞")}\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {b.get("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")}\n–û–±–æ –º–Ω–µ:{b.get("–û–±–æ –º–Ω–µ")}\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ:{url}')
            await state.reset_state(with_data=False)
            await message.answer(text=text)

        @dp.message_handler()
        async def e_else(message, state):
            data = await state.get_data()
            await message.answer('–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤. 1 –§–∏–ª—å—Ç—Ä {hp_job}'.format(data),
                                 reply_markup=butnn.hh_kb)

    elif message.text == '–í—ã—Å—à–∏–π –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç':
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã--\n1–§–ò–õ–¨–¢–†:\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã -',
                               reply_markup=butnn.gret_kb)
        await filtersforproject.hp_job.set()

        @dp.message_handler(state=filtersforproject.hp_job)
        async def answer_q1(message: types.Message, state: FSMContext):
            hp_job = message.text
            await state.update_data(hp_job=hp_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 2 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.hh_kb)
            await filtersforproject.tch_job.set()

        @dp.message_handler(state=filtersforproject.tch_job)
        async def answer_q2(message: types.Message, state: FSMContext):
            tch_job = message.text
            await state.update_data(tch_job=tch_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 3 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.zants_kb)
            await filtersforproject.same.set()

        @dp.message_handler(state=filtersforproject.same)
        async def answer_q3(message: types.Message, state: FSMContext):
            same = message.text
            await state.update_data(same=same)
            data = await state.get_data()
            text = '''1 –§–∏–ª—å—Ç—Ä : {hp_job}\n2 –§–∏–ª—å—Ç—Ä : {tch_job}\n3 –§–∏–ª—å—Ç—Ä : {same}'''.format(
                hp_job=data.get('hp_job'),
                tch_job=data.get('tch_job'),
                same=data.get('same'),
            )
            a = professeion_get(9, list_filters.get(data.get('hp_job')), list_filters.get(data.get('tch_job')),
                                list_filters.get(data.get('same')))
            for _ in a.values():
                url = 'https://hh.ru' + _
                b = resume_get(url)
                await bot.send_message(message.from_user.id,
                                       f'–ó–∞–≥–æ–ª–æ–≤–æ–∫ : {b.get("–ó–∞–≥–æ–ª–æ–≤–æ–∫:")}\n–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞: {b.get("–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞")}\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {b.get("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")}\n–û–±–æ –º–Ω–µ:{b.get("–û–±–æ –º–Ω–µ")}\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ:{url}')
            await state.reset_state(with_data=False)
            await message.answer(text=text)

        @dp.message_handler()
        async def e_else(message, state):
            data = await state.get_data()
            await message.answer('–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤. 1 –§–∏–ª—å—Ç—Ä {hp_job}'.format(data),
                                 reply_markup=butnn.hh_kb)

    elif message.text == '–ì–æ—Å —Å–ª—É–∂–±–∞, –Ω–µ–∫–æ–º–µ—Ä—á–∏—Å–∫–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏':
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã--\n1–§–ò–õ–¨–¢–†:\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã -',
                               reply_markup=butnn.gret_kb)
        await filtersforproject.hp_job.set()

        @dp.message_handler(state=filtersforproject.hp_job)
        async def answer_q1(message: types.Message, state: FSMContext):
            hp_job = message.text
            await state.update_data(hp_job=hp_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 2 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.hh_kb)
            await filtersforproject.tch_job.set()

        @dp.message_handler(state=filtersforproject.tch_job)
        async def answer_q2(message: types.Message, state: FSMContext):
            tch_job = message.text
            await state.update_data(tch_job=tch_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 3 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.zants_kb)
            await filtersforproject.same.set()

        @dp.message_handler(state=filtersforproject.same)
        async def answer_q3(message: types.Message, state: FSMContext):
            same = message.text
            await state.update_data(same=same)
            data = await state.get_data()
            text = '''1 –§–∏–ª—å—Ç—Ä : {hp_job}\n2 –§–∏–ª—å—Ç—Ä : {tch_job}\n3 –§–∏–ª—å—Ç—Ä : {same}'''.format(
                hp_job=data.get('hp_job'),
                tch_job=data.get('tch_job'),
                same=data.get('same'),
            )
            a = professeion_get(16, list_filters.get(data.get('hp_job')), list_filters.get(data.get('tch_job')),
                                list_filters.get(data.get('same')))
            for _ in a.values():
                url = 'https://hh.ru' + _
                b = resume_get(url)
                await bot.send_message(message.from_user.id,
                                       f'–ó–∞–≥–æ–ª–æ–≤–æ–∫ : {b.get("–ó–∞–≥–æ–ª–æ–≤–æ–∫:")}\n–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞: {b.get("–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞")}\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {b.get("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")}\n–û–±–æ –º–Ω–µ:{b.get("–û–±–æ –º–Ω–µ")}\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ:{url}')
            await state.reset_state(with_data=False)
            await message.answer(text=text)

        @dp.message_handler()
        async def e_else(message, state):
            data = await state.get_data()
            await message.answer('–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤. 1 –§–∏–ª—å—Ç—Ä {hp_job}'.format(data),
                                 reply_markup=butnn.hh_kb)

    elif message.text == '–î–æ–±—ã—á–∞ —Å—ã—Ä—å—è':
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã--\n1–§–ò–õ–¨–¢–†:\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã -',
                               reply_markup=butnn.gret_kb)
        await filtersforproject.hp_job.set()

        @dp.message_handler(state=filtersforproject.hp_job)
        async def answer_q1(message: types.Message, state: FSMContext):
            hp_job = message.text
            await state.update_data(hp_job=hp_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 2 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.hh_kb)
            await filtersforproject.tch_job.set()

        @dp.message_handler(state=filtersforproject.tch_job)
        async def answer_q2(message: types.Message, state: FSMContext):
            tch_job = message.text
            await state.update_data(tch_job=tch_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 3 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.zants_kb)
            await filtersforproject.same.set()

        @dp.message_handler(state=filtersforproject.same)
        async def answer_q3(message: types.Message, state: FSMContext):
            same = message.text
            await state.update_data(same=same)
            data = await state.get_data()
            text = '''1 –§–∏–ª—å—Ç—Ä : {hp_job}\n2 –§–∏–ª—å—Ç—Ä : {tch_job}\n3 –§–∏–ª—å—Ç—Ä : {same}'''.format(
                hp_job=data.get('hp_job'),
                tch_job=data.get('tch_job'),
                same=data.get('same'),
            )
            a = professeion_get(10, list_filters.get(data.get('hp_job')), list_filters.get(data.get('tch_job')),
                                list_filters.get(data.get('same')))
            for _ in a.values():
                url = 'https://hh.ru' + _
                b = resume_get(url)
                await bot.send_message(message.from_user.id,
                                       f'–ó–∞–≥–æ–ª–æ–≤–æ–∫ : {b.get("–ó–∞–≥–æ–ª–æ–≤–æ–∫:")}\n–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞: {b.get("–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞")}\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {b.get("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")}\n–û–±–æ –º–Ω–µ:{b.get("–û–±–æ –º–Ω–µ")}\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ:{url}')
            await state.reset_state(with_data=False)
            await message.answer(text=text)

        @dp.message_handler()
        async def e_else(message, state):
            data = await state.get_data()
            await message.answer('–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤. 1 –§–∏–ª—å—Ç—Ä {hp_job}'.format(data),
                                 reply_markup=butnn.hh_kb)

    elif message.text == '–î–æ–º–∞—à–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª':
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã--\n1–§–ò–õ–¨–¢–†:\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã -',
                               reply_markup=butnn.gret_kb)
        await filtersforproject.hp_job.set()

        @dp.message_handler(state=filtersforproject.hp_job)
        async def answer_q1(message: types.Message, state: FSMContext):
            hp_job = message.text
            await state.update_data(hp_job=hp_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 2 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.hh_kb)
            await filtersforproject.tch_job.set()

        @dp.message_handler(state=filtersforproject.tch_job)
        async def answer_q2(message: types.Message, state: FSMContext):
            tch_job = message.text
            await state.update_data(tch_job=tch_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 3 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.zants_kb)
            await filtersforproject.same.set()

        @dp.message_handler(state=filtersforproject.same)
        async def answer_q3(message: types.Message, state: FSMContext):
            same = message.text
            await state.update_data(same=same)
            data = await state.get_data()
            text = '''1 –§–∏–ª—å—Ç—Ä : {hp_job}\n2 –§–∏–ª—å—Ç—Ä : {tch_job}\n3 –§–∏–ª—å—Ç—Ä : {same}'''.format(
                hp_job=data.get('hp_job'),
                tch_job=data.get('tch_job'),
                same=data.get('same'),
            )
            a = professeion_get(27, list_filters.get(data.get('hp_job')), list_filters.get(data.get('tch_job')),
                                list_filters.get(data.get('same')))
            for _ in a.values():
                url = 'https://hh.ru' + _
                b = resume_get(url)
                await bot.send_message(message.from_user.id,
                                       f'–ó–∞–≥–æ–ª–æ–≤–æ–∫ : {b.get("–ó–∞–≥–æ–ª–æ–≤–æ–∫:")}\n–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞: {b.get("–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞")}\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {b.get("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")}\n–û–±–æ –º–Ω–µ:{b.get("–û–±–æ –º–Ω–µ")}\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ:{url}')
            await state.reset_state(with_data=False)
            await message.answer(text=text)

        @dp.message_handler()
        async def e_else(message, state):
            data = await state.get_data()
            await message.answer('–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤. 1 –§–∏–ª—å—Ç—Ä {hp_job}'.format(data),
                                 reply_markup=butnn.hh_kb)

    elif message.text == '–ó–∞–∫—É–ø–∫–∏':
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã--\n1–§–ò–õ–¨–¢–†:\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã -',
                               reply_markup=butnn.gret_kb)
        await filtersforproject.hp_job.set()

        @dp.message_handler(state=filtersforproject.hp_job)
        async def answer_q1(message: types.Message, state: FSMContext):
            hp_job = message.text
            await state.update_data(hp_job=hp_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 2 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.hh_kb)
            await filtersforproject.tch_job.set()

        @dp.message_handler(state=filtersforproject.tch_job)
        async def answer_q2(message: types.Message, state: FSMContext):
            tch_job = message.text
            await state.update_data(tch_job=tch_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 3 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.zants_kb)
            await filtersforproject.same.set()

        @dp.message_handler(state=filtersforproject.same)
        async def answer_q3(message: types.Message, state: FSMContext):
            same = message.text
            await state.update_data(same=same)
            data = await state.get_data()
            text = '''1 –§–∏–ª—å—Ç—Ä : {hp_job}\n2 –§–∏–ª—å—Ç—Ä : {tch_job}\n3 –§–∏–ª—å—Ç—Ä : {same}'''.format(
                hp_job=data.get('hp_job'),
                tch_job=data.get('tch_job'),
                same=data.get('same'),
            )
            a = professeion_get(26, list_filters.get(data.get('hp_job')), list_filters.get(data.get('tch_job')),
                                list_filters.get(data.get('same')))
            for _ in a.values():
                url = 'https://hh.ru' + _
                b = resume_get(url)
                await bot.send_message(message.from_user.id,
                                       f'–ó–∞–≥–æ–ª–æ–≤–æ–∫ : {b.get("–ó–∞–≥–æ–ª–æ–≤–æ–∫:")}\n–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞: {b.get("–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞")}\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {b.get("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")}\n–û–±–æ –º–Ω–µ:{b.get("–û–±–æ –º–Ω–µ")}\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ:{url}')
            await state.reset_state(with_data=False)
            await message.answer(text=text)

        @dp.message_handler()
        async def e_else(message, state):
            data = await state.get_data()
            await message.answer('–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤. 1 –§–∏–ª—å—Ç—Ä {hp_job}'.format(data),
                                 reply_markup=butnn.hh_kb)

    elif message.text == '–ò–Ω—Å—Ç–∞–ª—è—Ü–∏—è –∏ —Å–µ—Ä–≤–∏—Å':
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã--\n1–§–ò–õ–¨–¢–†:\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã -',
                               reply_markup=butnn.gret_kb)
        await filtersforproject.hp_job.set()

        @dp.message_handler(state=filtersforproject.hp_job)
        async def answer_q1(message: types.Message, state: FSMContext):
            hp_job = message.text
            await state.update_data(hp_job=hp_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 2 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.hh_kb)
            await filtersforproject.tch_job.set()

        @dp.message_handler(state=filtersforproject.tch_job)
        async def answer_q2(message: types.Message, state: FSMContext):
            tch_job = message.text
            await state.update_data(tch_job=tch_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 3 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.zants_kb)
            await filtersforproject.same.set()

        @dp.message_handler(state=filtersforproject.same)
        async def answer_q3(message: types.Message, state: FSMContext):
            same = message.text
            await state.update_data(same=same)
            data = await state.get_data()
            text = '''1 –§–∏–ª—å—Ç—Ä : {hp_job}\n2 –§–∏–ª—å—Ç—Ä : {tch_job}\n3 –§–∏–ª—å—Ç—Ä : {same}'''.format(
                hp_job=data.get('hp_job'),
                tch_job=data.get('tch_job'),
                same=data.get('same'),
            )
            a = professeion_get(25, list_filters.get(data.get('hp_job')), list_filters.get(data.get('tch_job')),
                                list_filters.get(data.get('same')))
            for _ in a.values():
                url = 'https://hh.ru' + _
                b = resume_get(url)
                await bot.send_message(message.from_user.id,
                                       f'–ó–∞–≥–æ–ª–æ–≤–æ–∫ : {b.get("–ó–∞–≥–æ–ª–æ–≤–æ–∫:")}\n–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞: {b.get("–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞")}\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {b.get("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")}\n–û–±–æ –º–Ω–µ:{b.get("–û–±–æ –º–Ω–µ")}\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ:{url}')
            await state.reset_state(with_data=False)
            await message.answer(text=text)

        @dp.message_handler()
        async def e_else(message, state):
            data = await state.get_data()
            await message.answer('–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤. 1 –§–∏–ª—å—Ç—Ä {hp_job}'.format(data),
                                 reply_markup=butnn.hh_kb)

    elif message.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Ç–µ–ª–µ–∫–æ–º':
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã--\n1–§–ò–õ–¨–¢–†:\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã -',
                               reply_markup=butnn.gret_kb)
        await filtersforproject.hp_job.set()

        @dp.message_handler(state=filtersforproject.hp_job)
        async def answer_q1(message: types.Message, state: FSMContext):
            hp_job = message.text
            await state.update_data(hp_job=hp_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 2 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.hh_kb)
            await filtersforproject.tch_job.set()

        @dp.message_handler(state=filtersforproject.tch_job)
        async def answer_q2(message: types.Message, state: FSMContext):
            tch_job = message.text
            await state.update_data(tch_job=tch_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 3 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.zants_kb)
            await filtersforproject.same.set()

        @dp.message_handler(state=filtersforproject.same)
        async def answer_q3(message: types.Message, state: FSMContext):
            same = message.text
            await state.update_data(same=same)
            data = await state.get_data()
            text = '''1 –§–∏–ª—å—Ç—Ä : {hp_job}\n2 –§–∏–ª—å—Ç—Ä : {tch_job}\n3 –§–∏–ª—å—Ç—Ä : {same}'''.format(
                hp_job=data.get('hp_job'),
                tch_job=data.get('tch_job'),
                same=data.get('same'),
            )
            a = professeion_get(1, list_filters.get(data.get('hp_job')), list_filters.get(data.get('tch_job')),
                                list_filters.get(data.get('same')))
            for _ in a.values():
                url = 'https://hh.ru' + _
                b = resume_get(url)
                await bot.send_message(message.from_user.id,
                                       f'–ó–∞–≥–æ–ª–æ–≤–æ–∫ : {b.get("–ó–∞–≥–æ–ª–æ–≤–æ–∫:")}\n–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞: {b.get("–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞")}\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {b.get("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")}\n–û–±–æ –º–Ω–µ:{b.get("–û–±–æ –º–Ω–µ")}\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ:{url}')
            await state.reset_state(with_data=False)
            await message.answer(text=text)

        @dp.message_handler()
        async def e_else(message, state):
            data = await state.get_data()
            await message.answer('–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤. 1 –§–∏–ª—å—Ç—Ä {hp_job}'.format(data),
                                 reply_markup=butnn.hh_kb)

    elif message.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Ç–µ–ª–µ–∫–æ–º':
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã--\n1–§–ò–õ–¨–¢–†:\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã -',
                               reply_markup=butnn.gret_kb)
        await filtersforproject.hp_job.set()

        @dp.message_handler(state=filtersforproject.hp_job)
        async def answer_q1(message: types.Message, state: FSMContext):
            hp_job = message.text
            await state.update_data(hp_job=hp_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 2 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.hh_kb)
            await filtersforproject.tch_job.set()

        @dp.message_handler(state=filtersforproject.tch_job)
        async def answer_q2(message: types.Message, state: FSMContext):
            tch_job = message.text
            await state.update_data(tch_job=tch_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 3 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.zants_kb)
            await filtersforproject.same.set()

        @dp.message_handler(state=filtersforproject.same)
        async def answer_q3(message: types.Message, state: FSMContext):
            same = message.text
            await state.update_data(same=same)
            data = await state.get_data()
            text = '''1 –§–∏–ª—å—Ç—Ä : {hp_job}\n2 –§–∏–ª—å—Ç—Ä : {tch_job}\n3 –§–∏–ª—å—Ç—Ä : {same}'''.format(
                hp_job=data.get('hp_job'),
                tch_job=data.get('tch_job'),
                same=data.get('same'),
            )
            a = professeion_get(1, list_filters.get(data.get('hp_job')), list_filters.get(data.get('tch_job')),
                                list_filters.get(data.get('same')))
            for _ in a.values():
                url = 'https://hh.ru' + _
                b = resume_get(url)
                await bot.send_message(message.from_user.id,
                                       f'–ó–∞–≥–æ–ª–æ–≤–æ–∫ : {b.get("–ó–∞–≥–æ–ª–æ–≤–æ–∫:")}\n–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞: {b.get("–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞")}\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {b.get("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")}\n–û–±–æ –º–Ω–µ:{b.get("–û–±–æ –º–Ω–µ")}\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ:{url}')
            await state.reset_state(with_data=False)
            await message.answer(text=text)

        @dp.message_handler()
        async def e_else(message, state):
            data = await state.get_data()
            await message.answer('–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤. 1 –§–∏–ª—å—Ç—Ä {hp_job}'.format(data),
                                 reply_markup=butnn.hh_kb)

    elif message.text == '–ò—Å—Å–∫—É—Å—Ç–≤–æ, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è, –º–∞—Å—Å - –º–µ–¥–∏–∞':
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã--\n1–§–ò–õ–¨–¢–†:\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã -',
                               reply_markup=butnn.gret_kb)
        await filtersforproject.hp_job.set()

        @dp.message_handler(state=filtersforproject.hp_job)
        async def answer_q1(message: types.Message, state: FSMContext):
            hp_job = message.text
            await state.update_data(hp_job=hp_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 2 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.hh_kb)
            await filtersforproject.tch_job.set()

        @dp.message_handler(state=filtersforproject.tch_job)
        async def answer_q2(message: types.Message, state: FSMContext):
            tch_job = message.text
            await state.update_data(tch_job=tch_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 3 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.zants_kb)
            await filtersforproject.same.set()

        @dp.message_handler(state=filtersforproject.same)
        async def answer_q3(message: types.Message, state: FSMContext):
            same = message.text
            await state.update_data(same=same)
            data = await state.get_data()
            text = '''1 –§–∏–ª—å—Ç—Ä : {hp_job}\n2 –§–∏–ª—å—Ç—Ä : {tch_job}\n3 –§–∏–ª—å—Ç—Ä : {same}'''.format(
                hp_job=data.get('hp_job'),
                tch_job=data.get('tch_job'),
                same=data.get('same'),
            )
            a = professeion_get(11, list_filters.get(data.get('hp_job')), list_filters.get(data.get('tch_job')),
                                list_filters.get(data.get('same')))
            for _ in a.values():
                url = 'https://hh.ru' + _
                b = resume_get(url)
                await bot.send_message(message.from_user.id,
                                       f'–ó–∞–≥–æ–ª–æ–≤–æ–∫ : {b.get("–ó–∞–≥–æ–ª–æ–≤–æ–∫:")}\n–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞: {b.get("–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞")}\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {b.get("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")}\n–û–±–æ –º–Ω–µ:{b.get("–û–±–æ –º–Ω–µ")}\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ:{url}')
            await state.reset_state(with_data=False)
            await message.answer(text=text)

        @dp.message_handler()
        async def e_else(message, state):
            data = await state.get_data()
            await message.answer('–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤. 1 –§–∏–ª—å—Ç—Ä {hp_job}'.format(data),
                                 reply_markup=butnn.hh_kb)

    elif message.text == '–ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ':
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã--\n1–§–ò–õ–¨–¢–†:\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã -',
                               reply_markup=butnn.gret_kb)
        await filtersforproject.hp_job.set()

        @dp.message_handler(state=filtersforproject.hp_job)
        async def answer_q1(message: types.Message, state: FSMContext):
            hp_job = message.text
            await state.update_data(hp_job=hp_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 2 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.hh_kb)
            await filtersforproject.tch_job.set()

        @dp.message_handler(state=filtersforproject.tch_job)
        async def answer_q2(message: types.Message, state: FSMContext):
            tch_job = message.text
            await state.update_data(tch_job=tch_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 3 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.zants_kb)
            await filtersforproject.same.set()

        @dp.message_handler(state=filtersforproject.same)
        async def answer_q3(message: types.Message, state: FSMContext):
            same = message.text
            await state.update_data(same=same)
            data = await state.get_data()
            text = '''1 –§–∏–ª—å—Ç—Ä : {hp_job}\n2 –§–∏–ª—å—Ç—Ä : {tch_job}\n3 –§–∏–ª—å—Ç—Ä : {same}'''.format(
                hp_job=data.get('hp_job'),
                tch_job=data.get('tch_job'),
                same=data.get('same'),
            )
            a = professeion_get(12, list_filters.get(data.get('hp_job')), list_filters.get(data.get('tch_job')),
                                list_filters.get(data.get('same')))
            for _ in a.values():
                url = 'https://hh.ru' + _
                b = resume_get(url)
                await bot.send_message(message.from_user.id,
                                       f'–ó–∞–≥–æ–ª–æ–≤–æ–∫ : {b.get("–ó–∞–≥–æ–ª–æ–≤–æ–∫:")}\n–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞: {b.get("–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞")}\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {b.get("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")}\n–û–±–æ –º–Ω–µ:{b.get("–û–±–æ –º–Ω–µ")}\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ:{url}')
            await state.reset_state(with_data=False)
            await message.answer(text=text)

        @dp.message_handler()
        async def e_else(message, state):
            data = await state.get_data()
            await message.answer('–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤. 1 –§–∏–ª—å—Ç—Ä {hp_job}'.format(data),
                                 reply_markup=butnn.hh_kb)

    elif message.text == '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥, —Ä–µ–∫–ª–∞–º–∞, PR':
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã--\n1–§–ò–õ–¨–¢–†:\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã -',
                               reply_markup=butnn.gret_kb)
        await filtersforproject.hp_job.set()

        @dp.message_handler(state=filtersforproject.hp_job)
        async def answer_q1(message: types.Message, state: FSMContext):
            hp_job = message.text
            await state.update_data(hp_job=hp_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 2 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.hh_kb)
            await filtersforproject.tch_job.set()

        @dp.message_handler(state=filtersforproject.tch_job)
        async def answer_q2(message: types.Message, state: FSMContext):
            tch_job = message.text
            await state.update_data(tch_job=tch_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 3 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.zants_kb)
            await filtersforproject.same.set()

        @dp.message_handler(state=filtersforproject.same)
        async def answer_q3(message: types.Message, state: FSMContext):
            same = message.text
            await state.update_data(same=same)
            data = await state.get_data()
            text = '''1 –§–∏–ª—å—Ç—Ä : {hp_job}\n2 –§–∏–ª—å—Ç—Ä : {tch_job}\n3 –§–∏–ª—å—Ç—Ä : {same}'''.format(
                hp_job=data.get('hp_job'),
                tch_job=data.get('tch_job'),
                same=data.get('same'),
            )
            a = professeion_get(3, list_filters.get(data.get('hp_job')), list_filters.get(data.get('tch_job')),
                                list_filters.get(data.get('same')))
            for _ in a.values():
                url = 'https://hh.ru' + _
                b = resume_get(url)
                await bot.send_message(message.from_user.id,
                                       f'–ó–∞–≥–æ–ª–æ–≤–æ–∫ : {b.get("–ó–∞–≥–æ–ª–æ–≤–æ–∫:")}\n–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞: {b.get("–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞")}\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {b.get("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")}\n–û–±–æ –º–Ω–µ:{b.get("–û–±–æ –º–Ω–µ")}\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ:{url}')
            await state.reset_state(with_data=False)
            await message.answer(text=text)

        @dp.message_handler()
        async def e_else(message, state):
            data = await state.get_data()
            await message.answer('–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤. 1 –§–∏–ª—å—Ç—Ä {hp_job}'.format(data),
                                 reply_markup=butnn.hh_kb)

    elif message.text == '–ú–µ–¥–µ—Ü–∏–Ω–∞, —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏–∫–∞':
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã--\n1–§–ò–õ–¨–¢–†:\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã -',
                               reply_markup=butnn.gret_kb)
        await filtersforproject.hp_job.set()

        @dp.message_handler(state=filtersforproject.hp_job)
        async def answer_q1(message: types.Message, state: FSMContext):
            hp_job = message.text
            await state.update_data(hp_job=hp_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 2 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.hh_kb)
            await filtersforproject.tch_job.set()

        @dp.message_handler(state=filtersforproject.tch_job)
        async def answer_q2(message: types.Message, state: FSMContext):
            tch_job = message.text
            await state.update_data(tch_job=tch_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 3 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.zants_kb)
            await filtersforproject.same.set()

        @dp.message_handler(state=filtersforproject.same)
        async def answer_q3(message: types.Message, state: FSMContext):
            same = message.text
            await state.update_data(same=same)
            data = await state.get_data()
            text = '''1 –§–∏–ª—å—Ç—Ä : {hp_job}\n2 –§–∏–ª—å—Ç—Ä : {tch_job}\n3 –§–∏–ª—å—Ç—Ä : {same}'''.format(
                hp_job=data.get('hp_job'),
                tch_job=data.get('tch_job'),
                same=data.get('same'),
            )
            a = professeion_get(13, list_filters.get(data.get('hp_job')), list_filters.get(data.get('tch_job')),
                                list_filters.get(data.get('same')))
            for _ in a.values():
                url = 'https://hh.ru' + _
                b = resume_get(url)
                await bot.send_message(message.from_user.id,
                                       f'–ó–∞–≥–æ–ª–æ–≤–æ–∫ : {b.get("–ó–∞–≥–æ–ª–æ–≤–æ–∫:")}\n–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞: {b.get("–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞")}\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {b.get("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")}\n–û–±–æ –º–Ω–µ:{b.get("–û–±–æ –º–Ω–µ")}\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ:{url}')
            await state.reset_state(with_data=False)
            await message.answer(text=text)

        @dp.message_handler()
        async def e_else(message, state):
            data = await state.get_data()
            await message.answer('–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤. 1 –§–∏–ª—å—Ç—Ä {hp_job}'.format(data),
                                 reply_markup=butnn.hh_kb)

    elif message.text == '–ù–∞—É–∫–∞, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ':
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã--\n1–§–ò–õ–¨–¢–†:\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã -',
                               reply_markup=butnn.gret_kb)
        await filtersforproject.hp_job.set()

        @dp.message_handler(state=filtersforproject.hp_job)
        async def answer_q1(message: types.Message, state: FSMContext):
            hp_job = message.text
            await state.update_data(hp_job=hp_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 2 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.hh_kb)
            await filtersforproject.tch_job.set()

        @dp.message_handler(state=filtersforproject.tch_job)
        async def answer_q2(message: types.Message, state: FSMContext):
            tch_job = message.text
            await state.update_data(tch_job=tch_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 3 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.zants_kb)
            await filtersforproject.same.set()

        @dp.message_handler(state=filtersforproject.same)
        async def answer_q3(message: types.Message, state: FSMContext):
            same = message.text
            await state.update_data(same=same)
            data = await state.get_data()
            text = '''1 –§–∏–ª—å—Ç—Ä : {hp_job}\n2 –§–∏–ª—å—Ç—Ä : {tch_job}\n3 –§–∏–ª—å—Ç—Ä : {same}'''.format(
                hp_job=data.get('hp_job'),
                tch_job=data.get('tch_job'),
                same=data.get('same'),
            )
            a = professeion_get(14, list_filters.get(data.get('hp_job')), list_filters.get(data.get('tch_job')),
                                list_filters.get(data.get('same')))
            for _ in a.values():
                url = 'https://hh.ru' + _
                b = resume_get(url)
                await bot.send_message(message.from_user.id,
                                       f'–ó–∞–≥–æ–ª–æ–≤–æ–∫ : {b.get("–ó–∞–≥–æ–ª–æ–≤–æ–∫:")}\n–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞: {b.get("–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞")}\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {b.get("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")}\n–û–±–æ –º–Ω–µ:{b.get("–û–±–æ –º–Ω–µ")}\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ:{url}')
            await state.reset_state(with_data=False)
            await message.answer(text=text)

        @dp.message_handler()
        async def e_else(message, state):
            data = await state.get_data()
            await message.answer('–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤. 1 –§–∏–ª—å—Ç—Ä {hp_job}'.format(data),
                                 reply_markup=butnn.hh_kb)

    elif message.text == '–ù–∞—á–∞–ª–æ –∫–∞—Ä—å–µ—Ä—ã, —Å—Ç—É–¥–µ–Ω—Ç—ã':
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã--\n1–§–ò–õ–¨–¢–†:\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã -',
                               reply_markup=butnn.gret_kb)
        await filtersforproject.hp_job.set()

        @dp.message_handler(state=filtersforproject.hp_job)
        async def answer_q1(message: types.Message, state: FSMContext):
            hp_job = message.text
            await state.update_data(hp_job=hp_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 2 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.hh_kb)
            await filtersforproject.tch_job.set()

        @dp.message_handler(state=filtersforproject.tch_job)
        async def answer_q2(message: types.Message, state: FSMContext):
            tch_job = message.text
            await state.update_data(tch_job=tch_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 3 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.zants_kb)
            await filtersforproject.same.set()

        @dp.message_handler(state=filtersforproject.same)
        async def answer_q3(message: types.Message, state: FSMContext):
            same = message.text
            await state.update_data(same=same)
            data = await state.get_data()
            text = '''1 –§–∏–ª—å—Ç—Ä : {hp_job}\n2 –§–∏–ª—å—Ç—Ä : {tch_job}\n3 –§–∏–ª—å—Ç—Ä : {same}'''.format(
                hp_job=data.get('hp_job'),
                tch_job=data.get('tch_job'),
                same=data.get('same'),
            )
            a = professeion_get(15, list_filters.get(data.get('hp_job')), list_filters.get(data.get('tch_job')),
                                list_filters.get(data.get('same')))
            for _ in a.values():
                url = 'https://hh.ru' + _
                b = resume_get(url)
                await bot.send_message(message.from_user.id,
                                       f'–ó–∞–≥–æ–ª–æ–≤–æ–∫ : {b.get("–ó–∞–≥–æ–ª–æ–≤–æ–∫:")}\n–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞: {b.get("–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞")}\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {b.get("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")}\n–û–±–æ –º–Ω–µ:{b.get("–û–±–æ –º–Ω–µ")}\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ:{url}')
            await state.reset_state(with_data=False)
            await message.answer(text=text)

        @dp.message_handler()
        async def e_else(message, state):
            data = await state.get_data()
            await message.answer('–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤. 1 –§–∏–ª—å—Ç—Ä {hp_job}'.format(data),
                                 reply_markup=butnn.hh_kb)

    elif message.text == '–ü—Ä–æ–¥–∞–∂–∏':
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã--\n1–§–ò–õ–¨–¢–†:\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã -',
                               reply_markup=butnn.gret_kb)
        await filtersforproject.hp_job.set()

        @dp.message_handler(state=filtersforproject.hp_job)
        async def answer_q1(message: types.Message, state: FSMContext):
            hp_job = message.text
            await state.update_data(hp_job=hp_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 2 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.hh_kb)
            await filtersforproject.tch_job.set()

        @dp.message_handler(state=filtersforproject.tch_job)
        async def answer_q2(message: types.Message, state: FSMContext):
            tch_job = message.text
            await state.update_data(tch_job=tch_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 3 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.zants_kb)
            await filtersforproject.same.set()

        @dp.message_handler(state=filtersforproject.same)
        async def answer_q3(message: types.Message, state: FSMContext):
            same = message.text
            await state.update_data(same=same)
            data = await state.get_data()
            text = '''1 –§–∏–ª—å—Ç—Ä : {hp_job}\n2 –§–∏–ª—å—Ç—Ä : {tch_job}\n3 –§–∏–ª—å—Ç—Ä : {same}'''.format(
                hp_job=data.get('hp_job'),
                tch_job=data.get('tch_job'),
                same=data.get('same'),
            )
            a = professeion_get(17, list_filters.get(data.get('hp_job')), list_filters.get(data.get('tch_job')),
                                list_filters.get(data.get('same')))
            for _ in a.values():
                url = 'https://hh.ru' + _
                b = resume_get(url)
                await bot.send_message(message.from_user.id,
                                       f'–ó–∞–≥–æ–ª–æ–≤–æ–∫ : {b.get("–ó–∞–≥–æ–ª–æ–≤–æ–∫:")}\n–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞: {b.get("–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞")}\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {b.get("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")}\n–û–±–æ –º–Ω–µ:{b.get("–û–±–æ –º–Ω–µ")}\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ:{url}')
            await state.reset_state(with_data=False)
            await message.answer(text=text)

        @dp.message_handler()
        async def e_else(message, state):
            data = await state.get_data()
            await message.answer('–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤. 1 –§–∏–ª—å—Ç—Ä {hp_job}'.format(data),
                                 reply_markup=butnn.hh_kb)

    elif message.text == '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ, —Å–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ':
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã--\n1–§–ò–õ–¨–¢–†:\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã -',
                               reply_markup=butnn.gret_kb)
        await filtersforproject.hp_job.set()

        @dp.message_handler(state=filtersforproject.hp_job)
        async def answer_q1(message: types.Message, state: FSMContext):
            hp_job = message.text
            await state.update_data(hp_job=hp_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 2 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.hh_kb)
            await filtersforproject.tch_job.set()

        @dp.message_handler(state=filtersforproject.tch_job)
        async def answer_q2(message: types.Message, state: FSMContext):
            tch_job = message.text
            await state.update_data(tch_job=tch_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 3 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.zants_kb)
            await filtersforproject.same.set()

        @dp.message_handler(state=filtersforproject.same)
        async def answer_q3(message: types.Message, state: FSMContext):
            same = message.text
            await state.update_data(same=same)
            data = await state.get_data()
            text = '''1 –§–∏–ª—å—Ç—Ä : {hp_job}\n2 –§–∏–ª—å—Ç—Ä : {tch_job}\n3 –§–∏–ª—å—Ç—Ä : {same}'''.format(
                hp_job=data.get('hp_job'),
                tch_job=data.get('tch_job'),
                same=data.get('same'),
            )
            a = professeion_get(18, list_filters.get(data.get('hp_job')), list_filters.get(data.get('tch_job')),
                                list_filters.get(data.get('same')))
            for _ in a.values():
                url = 'https://hh.ru' + _
                b = resume_get(url)
                await bot.send_message(message.from_user.id,
                                       f'–ó–∞–≥–æ–ª–æ–≤–æ–∫ : {b.get("–ó–∞–≥–æ–ª–æ–≤–æ–∫:")}\n–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞: {b.get("–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞")}\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {b.get("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")}\n–û–±–æ –º–Ω–µ:{b.get("–û–±–æ –º–Ω–µ")}\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ:{url}')
            await state.reset_state(with_data=False)
            await message.answer(text=text)

        @dp.message_handler()
        async def e_else(message, state):
            data = await state.get_data()
            await message.answer('–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤. 1 –§–∏–ª—å—Ç—Ä {hp_job}'.format(data),
                                 reply_markup=butnn.hh_kb)

    elif message.text == '–†–∞–±–æ—á–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª':
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã--\n1–§–ò–õ–¨–¢–†:\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã -',
                               reply_markup=butnn.gret_kb)
        await filtersforproject.hp_job.set()

        @dp.message_handler(state=filtersforproject.hp_job)
        async def answer_q1(message: types.Message, state: FSMContext):
            hp_job = message.text
            await state.update_data(hp_job=hp_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 2 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.hh_kb)
            await filtersforproject.tch_job.set()

        @dp.message_handler(state=filtersforproject.tch_job)
        async def answer_q2(message: types.Message, state: FSMContext):
            tch_job = message.text
            await state.update_data(tch_job=tch_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 3 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.zants_kb)
            await filtersforproject.same.set()

        @dp.message_handler(state=filtersforproject.same)
        async def answer_q3(message: types.Message, state: FSMContext):
            same = message.text
            await state.update_data(same=same)
            data = await state.get_data()
            text = '''1 –§–∏–ª—å—Ç—Ä : {hp_job}\n2 –§–∏–ª—å—Ç—Ä : {tch_job}\n3 –§–∏–ª—å—Ç—Ä : {same}'''.format(
                hp_job=data.get('hp_job'),
                tch_job=data.get('tch_job'),
                same=data.get('same'),
            )
            a = professeion_get(29, list_filters.get(data.get('hp_job')), list_filters.get(data.get('tch_job')),
                                list_filters.get(data.get('same')))
            for _ in a.values():
                url = 'https://hh.ru' + _
                b = resume_get(url)
                await bot.send_message(message.from_user.id,
                                       f'–ó–∞–≥–æ–ª–æ–≤–æ–∫ : {b.get("–ó–∞–≥–æ–ª–æ–≤–æ–∫:")}\n–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞: {b.get("–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞")}\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {b.get("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")}\n–û–±–æ –º–Ω–µ:{b.get("–û–±–æ –º–Ω–µ")}\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ:{url}')
            await state.reset_state(with_data=False)
            await message.answer(text=text)

        @dp.message_handler()
        async def e_else(message, state):
            data = await state.get_data()
            await message.answer('–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤. 1 –§–∏–ª—å—Ç—Ä {hp_job}'.format(data),
                                 reply_markup=butnn.hh_kb)

    elif message.text == '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∫–ª—É–±—ã(—Ñ–∏—Ç–Ω–µ—Å –∏ —Ç.–¥)':
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã--\n1–§–ò–õ–¨–¢–†:\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã -',
                               reply_markup=butnn.gret_kb)
        await filtersforproject.hp_job.set()

        @dp.message_handler(state=filtersforproject.hp_job)
        async def answer_q1(message: types.Message, state: FSMContext):
            hp_job = message.text
            await state.update_data(hp_job=hp_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 2 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.hh_kb)
            await filtersforproject.tch_job.set()

        @dp.message_handler(state=filtersforproject.tch_job)
        async def answer_q2(message: types.Message, state: FSMContext):
            tch_job = message.text
            await state.update_data(tch_job=tch_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 3 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.zants_kb)
            await filtersforproject.same.set()

        @dp.message_handler(state=filtersforproject.same)
        async def answer_q3(message: types.Message, state: FSMContext):
            same = message.text
            await state.update_data(same=same)
            data = await state.get_data()
            text = '''1 –§–∏–ª—å—Ç—Ä : {hp_job}\n2 –§–∏–ª—å—Ç—Ä : {tch_job}\n3 –§–∏–ª—å—Ç—Ä : {same}'''.format(
                hp_job=data.get('hp_job'),
                tch_job=data.get('tch_job'),
                same=data.get('same'),
            )
            a = professeion_get(24, list_filters.get(data.get('hp_job')), list_filters.get(data.get('tch_job')),
                                list_filters.get(data.get('same')))
            for _ in a.values():
                url = 'https://hh.ru' + _
                b = resume_get(url)
                await bot.send_message(message.from_user.id,
                                       f'–ó–∞–≥–æ–ª–æ–≤–æ–∫ : {b.get("–ó–∞–≥–æ–ª–æ–≤–æ–∫:")}\n–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞: {b.get("–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞")}\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {b.get("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")}\n–û–±–æ –º–Ω–µ:{b.get("–û–±–æ –º–Ω–µ")}\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ:{url}')
            await state.reset_state(with_data=False)
            await message.answer(text=text)

        @dp.message_handler()
        async def e_else(message, state):
            data = await state.get_data()
            await message.answer('–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤. 1 –§–∏–ª—å—Ç—Ä {hp_job}'.format(data),
                                 reply_markup=butnn.hh_kb)

    elif message.text == '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ':
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã--\n1–§–ò–õ–¨–¢–†:\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã -',
                               reply_markup=butnn.gret_kb)
        await filtersforproject.hp_job.set()

        @dp.message_handler(state=filtersforproject.hp_job)
        async def answer_q1(message: types.Message, state: FSMContext):
            hp_job = message.text
            await state.update_data(hp_job=hp_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 2 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.hh_kb)
            await filtersforproject.tch_job.set()

        @dp.message_handler(state=filtersforproject.tch_job)
        async def answer_q2(message: types.Message, state: FSMContext):
            tch_job = message.text
            await state.update_data(tch_job=tch_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 3 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.zants_kb)
            await filtersforproject.same.set()

        @dp.message_handler(state=filtersforproject.same)
        async def answer_q3(message: types.Message, state: FSMContext):
            same = message.text
            await state.update_data(same=same)
            data = await state.get_data()
            text = '''1 –§–∏–ª—å—Ç—Ä : {hp_job}\n2 –§–∏–ª—å—Ç—Ä : {tch_job}\n3 –§–∏–ª—å—Ç—Ä : {same}'''.format(
                hp_job=data.get('hp_job'),
                tch_job=data.get('tch_job'),
                same=data.get('same'),
            )
            a = professeion_get(19, list_filters.get(data.get('hp_job')), list_filters.get(data.get('tch_job')),
                                list_filters.get(data.get('same')))
            for _ in a.values():
                url = 'https://hh.ru' + _
                b = resume_get(url)
                await bot.send_message(message.from_user.id,
                                       f'–ó–∞–≥–æ–ª–æ–≤–æ–∫ : {b.get("–ó–∞–≥–æ–ª–æ–≤–æ–∫:")}\n–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞: {b.get("–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞")}\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {b.get("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")}\n–û–±–æ –º–Ω–µ:{b.get("–û–±–æ –º–Ω–µ")}\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ:{url}')
            await state.reset_state(with_data=False)
            await message.answer(text=text)

        @dp.message_handler()
        async def e_else(message, state):
            data = await state.get_data()
            await message.answer('–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤. 1 –§–∏–ª—å—Ç—Ä {hp_job}'.format(data),
                                 reply_markup=butnn.hh_kb)

    elif message.text == '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ, –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å':
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã--\n1–§–ò–õ–¨–¢–†:\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã -',
                               reply_markup=butnn.gret_kb)
        await filtersforproject.hp_job.set()

        @dp.message_handler(state=filtersforproject.hp_job)
        async def answer_q1(message: types.Message, state: FSMContext):
            hp_job = message.text
            await state.update_data(hp_job=hp_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 2 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.hh_kb)
            await filtersforproject.tch_job.set()

        @dp.message_handler(state=filtersforproject.tch_job)
        async def answer_q2(message: types.Message, state: FSMContext):
            tch_job = message.text
            await state.update_data(tch_job=tch_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 3 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.zants_kb)
            await filtersforproject.same.set()

        @dp.message_handler(state=filtersforproject.same)
        async def answer_q3(message: types.Message, state: FSMContext):
            same = message.text
            await state.update_data(same=same)
            data = await state.get_data()
            text = '''1 –§–∏–ª—å—Ç—Ä : {hp_job}\n2 –§–∏–ª—å—Ç—Ä : {tch_job}\n3 –§–∏–ª—å—Ç—Ä : {same}'''.format(
                hp_job=data.get('hp_job'),
                tch_job=data.get('tch_job'),
                same=data.get('same'),
            )
            a = professeion_get(20, list_filters.get(data.get('hp_job')), list_filters.get(data.get('tch_job')),
                                list_filters.get(data.get('same')))
            for _ in a.values():
                url = 'https://hh.ru' + _
                b = resume_get(url)
                await bot.send_message(message.from_user.id,
                                       f'–ó–∞–≥–æ–ª–æ–≤–æ–∫ : {b.get("–ó–∞–≥–æ–ª–æ–≤–æ–∫:")}\n–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞: {b.get("–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞")}\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {b.get("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")}\n–û–±–æ –º–Ω–µ:{b.get("–û–±–æ –º–Ω–µ")}\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ:{url}')
            await state.reset_state(with_data=False)
            await message.answer(text=text)

        @dp.message_handler()
        async def e_else(message, state):
            data = await state.get_data()
            await message.answer('–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤. 1 –§–∏–ª—å—Ç—Ä {hp_job}'.format(data),
                                 reply_markup=butnn.hh_kb)

    elif message.text == '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –ª–æ–≥–∏—Å—Ç–∏–∫–∞':
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã--\n1–§–ò–õ–¨–¢–†:\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã -',
                               reply_markup=butnn.gret_kb)
        await filtersforproject.hp_job.set()

        @dp.message_handler(state=filtersforproject.hp_job)
        async def answer_q1(message: types.Message, state: FSMContext):
            hp_job = message.text
            await state.update_data(hp_job=hp_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 2 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.hh_kb)
            await filtersforproject.tch_job.set()

        @dp.message_handler(state=filtersforproject.tch_job)
        async def answer_q2(message: types.Message, state: FSMContext):
            tch_job = message.text
            await state.update_data(tch_job=tch_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 3 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.zants_kb)
            await filtersforproject.same.set()

        @dp.message_handler(state=filtersforproject.same)
        async def answer_q3(message: types.Message, state: FSMContext):
            same = message.text
            await state.update_data(same=same)
            data = await state.get_data()
            text = '''1 –§–∏–ª—å—Ç—Ä : {hp_job}\n2 –§–∏–ª—å—Ç—Ä : {tch_job}\n3 –§–∏–ª—å—Ç—Ä : {same}'''.format(
                hp_job=data.get('hp_job'),
                tch_job=data.get('tch_job'),
                same=data.get('same'),
            )
            a = professeion_get(21, list_filters.get(data.get('hp_job')), list_filters.get(data.get('tch_job')),
                                list_filters.get(data.get('same')))
            for _ in a.values():
                url = 'https://hh.ru' + _
                b = resume_get(url)
                await bot.send_message(message.from_user.id,
                                       f'–ó–∞–≥–æ–ª–æ–≤–æ–∫ : {b.get("–ó–∞–≥–æ–ª–æ–≤–æ–∫:")}\n–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞: {b.get("–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞")}\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {b.get("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")}\n–û–±–æ –º–Ω–µ:{b.get("–û–±–æ –º–Ω–µ")}\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ:{url}')
            await state.reset_state(with_data=False)
            await message.answer(text=text)

        @dp.message_handler()
        async def e_else(message, state):
            data = await state.get_data()
            await message.answer('–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤. 1 –§–∏–ª—å—Ç—Ä {hp_job}'.format(data),
                                 reply_markup=butnn.hh_kb)

    elif message.text == '–¢—É—Ä–∏–∑–º, –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã, —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã':
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã--\n1–§–ò–õ–¨–¢–†:\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã -',
                               reply_markup=butnn.gret_kb)
        await filtersforproject.hp_job.set()

        @dp.message_handler(state=filtersforproject.hp_job)
        async def answer_q1(message: types.Message, state: FSMContext):
            hp_job = message.text
            await state.update_data(hp_job=hp_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 2 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.hh_kb)
            await filtersforproject.tch_job.set()

        @dp.message_handler(state=filtersforproject.tch_job)
        async def answer_q2(message: types.Message, state: FSMContext):
            tch_job = message.text
            await state.update_data(tch_job=tch_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 3 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.zants_kb)
            await filtersforproject.same.set()

        @dp.message_handler(state=filtersforproject.same)
        async def answer_q3(message: types.Message, state: FSMContext):
            same = message.text
            await state.update_data(same=same)
            data = await state.get_data()
            text = '''1 –§–∏–ª—å—Ç—Ä : {hp_job}\n2 –§–∏–ª—å—Ç—Ä : {tch_job}\n3 –§–∏–ª—å—Ç—Ä : {same}'''.format(
                hp_job=data.get('hp_job'),
                tch_job=data.get('tch_job'),
                same=data.get('same'),
            )
            a = professeion_get(22, list_filters.get(data.get('hp_job')), list_filters.get(data.get('tch_job')),
                                list_filters.get(data.get('same')))
            for _ in a.values():
                url = 'https://hh.ru' + _
                b = resume_get(url)
                await bot.send_message(message.from_user.id,
                                       f'–ó–∞–≥–æ–ª–æ–≤–æ–∫ : {b.get("–ó–∞–≥–æ–ª–æ–≤–æ–∫:")}\n–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞: {b.get("–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞")}\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {b.get("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")}\n–û–±–æ –º–Ω–µ:{b.get("–û–±–æ –º–Ω–µ")}\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ:{url}')
            await state.reset_state(with_data=False)
            await message.answer(text=text)

        @dp.message_handler()
        async def e_else(message, state):
            data = await state.get_data()
            await message.answer('–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤. 1 –§–∏–ª—å—Ç—Ä {hp_job}'.format(data),
                                 reply_markup=butnn.hh_kb)

    elif message.text == '–¢—Ä–µ–Ω–Ω–∏–Ω–≥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º':
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã--\n1–§–ò–õ–¨–¢–†:\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã -',
                               reply_markup=butnn.gret_kb)
        await filtersforproject.hp_job.set()

        @dp.message_handler(state=filtersforproject.hp_job)
        async def answer_q1(message: types.Message, state: FSMContext):
            hp_job = message.text
            await state.update_data(hp_job=hp_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 2 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.hh_kb)
            await filtersforproject.tch_job.set()

        @dp.message_handler(state=filtersforproject.tch_job)
        async def answer_q2(message: types.Message, state: FSMContext):
            tch_job = message.text
            await state.update_data(tch_job=tch_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 3 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.zants_kb)
            await filtersforproject.same.set()

        @dp.message_handler(state=filtersforproject.same)
        async def answer_q3(message: types.Message, state: FSMContext):
            same = message.text
            await state.update_data(same=same)
            data = await state.get_data()
            text = '''1 –§–∏–ª—å—Ç—Ä : {hp_job}\n2 –§–∏–ª—å—Ç—Ä : {tch_job}\n3 –§–∏–ª—å—Ç—Ä : {same}'''.format(
                hp_job=data.get('hp_job'),
                tch_job=data.get('tch_job'),
                same=data.get('same'),
            )
            a = professeion_get(6, list_filters.get(data.get('hp_job')), list_filters.get(data.get('tch_job')),
                                list_filters.get(data.get('same')))
            for _ in a.values():
                url = 'https://hh.ru' + _
                b = resume_get(url)
                await bot.send_message(message.from_user.id,
                                       f'–ó–∞–≥–æ–ª–æ–≤–æ–∫ : {b.get("–ó–∞–≥–æ–ª–æ–≤–æ–∫:")}\n–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞: {b.get("–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞")}\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {b.get("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")}\n–û–±–æ –º–Ω–µ:{b.get("–û–±–æ –º–Ω–µ")}\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ:{url}')
            await state.reset_state(with_data=False)
            await message.answer(text=text)

        @dp.message_handler()
        async def e_else(message, state):
            data = await state.get_data()
            await message.answer('–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤. 1 –§–∏–ª—å—Ç—Ä {hp_job}'.format(data),
                                 reply_markup=butnn.hh_kb)

    elif message.text == '–Æ—Ä–∏—Å—Ç—ã':
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã--\n1–§–ò–õ–¨–¢–†:\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã -',
                               reply_markup=butnn.gret_kb)
        await filtersforproject.hp_job.set()

        @dp.message_handler(state=filtersforproject.hp_job)
        async def answer_q1(message: types.Message, state: FSMContext):
            hp_job = message.text
            await state.update_data(hp_job=hp_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 2 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.hh_kb)
            await filtersforproject.tch_job.set()

        @dp.message_handler(state=filtersforproject.tch_job)
        async def answer_q2(message: types.Message, state: FSMContext):
            tch_job = message.text
            await state.update_data(tch_job=tch_job)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ 3 —Ñ–∏–ª—å—Ç—Ä\n–ü–æ–ª\n(-_-)...?', reply_markup=butnn.zants_kb)
            await filtersforproject.same.set()

        @dp.message_handler(state=filtersforproject.same)
        async def answer_q3(message: types.Message, state: FSMContext):
            same = message.text
            await state.update_data(same=same)
            data = await state.get_data()
            text = '''1 –§–∏–ª—å—Ç—Ä : {hp_job}\n2 –§–∏–ª—å—Ç—Ä : {tch_job}\n3 –§–∏–ª—å—Ç—Ä : {same}'''.format(
                hp_job=data.get('hp_job'),
                tch_job=data.get('tch_job'),
                same=data.get('same'),
            )
            a = professeion_get(23, list_filters.get(data.get('hp_job')), list_filters.get(data.get('tch_job')),
                                list_filters.get(data.get('same')))
            for _ in a.values():
                url = 'https://hh.ru' + _
                b = resume_get(url)
                await bot.send_message(message.from_user.id,
                                       f'–ó–∞–≥–æ–ª–æ–≤–æ–∫ : {b.get("–ó–∞–≥–æ–ª–æ–≤–æ–∫:")}\n–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞: {b.get("–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞")}\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {b.get("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")}\n–û–±–æ –º–Ω–µ:{b.get("–û–±–æ –º–Ω–µ")}\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ:{url}')
            await state.reset_state(with_data=False)
            await message.answer(text=text)

        @dp.message_handler()
        async def e_else(message, state):
            data = await state.get_data()





if __name__ == '__main__':
    executor.start_polling(dp)
